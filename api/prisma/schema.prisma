// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  full_name     String
  password_hash String
  forms         Form[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Token {
  id            String   @id @default(cuid())
  userId        String   @unique
  refresh_token String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Form {
  id        Int         @id @default(autoincrement())
  config    FormConfig?
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  endsAt    DateTime?
}

model FormConfig {
  id          String         @id @default(cuid())
  name        String
  title       Json
  description Json?          @default("null")
  questions   FormQuestion[]
  formId      Int            @unique
  form        Form           @relation(fields: [formId], references: [id])
}

model FormQuestion {
  id           String               @id @default(cuid())
  formConfigId String
  type         String
  title        Json
  options      FormQuestionOption[]
  required     Boolean?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  formConfig   FormConfig           @relation(fields: [formConfigId], references: [id])
}

model FormQuestionOption {
  id           String       @id @default(cuid())
  questionId   String
  value        String
  formQuestion FormQuestion @relation(fields: [questionId], references: [id])
}
